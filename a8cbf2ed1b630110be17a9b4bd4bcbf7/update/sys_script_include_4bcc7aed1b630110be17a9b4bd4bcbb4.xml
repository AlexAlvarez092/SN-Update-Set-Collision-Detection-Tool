<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.CollisionDetectionUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CollisionDetectionUtils</name>
        <script><![CDATA[var CollisionDetectionUtils = Class.create();
CollisionDetectionUtils.prototype = {
    initialize: function () { },

    /**SNDOC
        @name fileScanner
        @description Scans a developing object such as business rules or ACLs (understanding developing object as every object stored in a table extending sys_metadata table) searching for potential conflicts with other update set(s) (there might be a conflict between two update sets whenever both of them are updating the same developing object, in such case, promoting one of them might include some pieces of code belonging to the other update set). Uses a bunch of system properties to include/exclude certain conditions such as exclude/include update sets marked as default or in state ignore. Returns an array of objects representing a conflictive update set (object include information about the owner, link to the record, when it was created, etc.).
        @param {GlideRecord} [grInputRecord] - Extending sys_metadata table
        @returns {Array<Object>} [{name:'',owner:'',created:'',url:''},{...}]
    */
    fileScanner: function (grInputRecord) {
        try {
            if (gs.nil(grInputRecord) || !grInputRecord.isValidRecord()) {
                throw new Error('Not valid parameter: grInputRecord => ' + JSON.stringify(grInputRecord, null, 2));
            }

            var arrObjects = [];

            var grFileVersion = new GlideRecord('sys_update_version');
            grFileVersion.addQuery('name', grInputRecord.getValue('sys_update_name'));
            grFileVersion.addQuery('state', 'current');
            grFileVersion.orderByDesc("sys_created_on");
            grFileVersion.query();

            while (grFileVersion.next()) {

                var grUpdateSet = grFileVersion.source.getRefRecord();

                if (!grUpdateSet.isValidRecord()) {
                    gs.logWarning('Not valid record: grUpdateSet => ' + JSON.stringify(grUpdateSet, null, 2), 'UpdateSetUtils.fileScanner()');
                    continue;
                }

                var excludeDefaultUpdateSet = gs.getProperty('collision_detection.app_file.exclude_default', 'false'); // string ["true", "false"]
                var excludeCompleteOrIgnore = gs.getProperty('collision_detection.app_file.exclude_completed_ignored', 'false'); // string ["true", "false"]
                var excludeYoursUpdateSets = gs.getProperty('collision_detection.app_file.exclude_your_own_sets', 'false'); // string ["true", "false"]

                var currentUser = gs.getUser().getName();
                var currentUpdateSet = gs.getPreference('sys_update_set');

                var updateSetName = grUpdateSet.getValue('name');
                var updateSetSysId = grUpdateSet.getUniqueValue();
                var updateSetState = grUpdateSet.getValue('state');
                var updateSetOwner = grUpdateSet.getValue('sys_created_by');
                var updateSetCreatedOn = grUpdateSet.getValue('sys_created_on');
                var updateSetLink = grUpdateSet.getLink();

                // Exclude default update set(s)
                if (excludeDefaultUpdateSet === 'true' && updateSetName.toLowerCase().indexOf('default') === 0) {
                    continue;
                }

                // Exclude completed/ignored update set(s)
                if (excludeCompleteOrIgnore === 'true' && updateSetState !== 'in progress') {
                    continue;
                }

                // Exclude your own update set(s)
                if (excludeYoursUpdateSets === 'true' && currentUser === updateSetOwner) {
                    continue;
                }

                // Exclude current update set
                if (currentUpdateSet === updateSetSysId) {
                    continue;
                }

                var objUpdateSet = {};
                objUpdateSet.name = updateSetName;
                objUpdateSet.owner = updateSetOwner;
                objUpdateSet.created = updateSetCreatedOn;
                objUpdateSet.url = updateSetLink;

                arrObjects.push(objUpdateSet);
            }

            // Remove duplicate entries
            var uniqueArray = arrObjects.filter(function (item, pos) {
                return arrObjects.indexOf(item) == pos;
            });

            return uniqueArray;

        } catch (e) {
            gs.logError(JSON.stringify(e, null, 2), 'UpdateSetUtils.fileScanner()');
            return e;
        }
    },

    /**SNDOC
        @name setScanner
        @description Scans an update set searching for potential conflics with other update set(s) (there might be a conflict between two update sets whenever both of them are updating the same developing object, in such case, promoting one of them might include some pieces of code belonging to the other update set). Uses a bunch of system properties to include/exclude certain conditions such as exclude/include update sets marked as default.
        @param {GlideRecord} [grInputUpdateSet] - sys_update_set
        @param {String} [inputQuery] - Encoded query such as "active=true^state=created"
        @returns {Array<String>} sys_update_set.sys_id
    */
    setScanner: function (grInputUpdateSet, inputQuery) {
        try {
            if (gs.nil(grInputUpdateSet) || !grInputUpdateSet.isValidRecord()) {
                throw new Error('Not valid parameter: grInputUpdateSet => ' + JSON.stringify(grInputUpdateSet, null, 2));
            }

            var inputUpdateSetSysId = grInputUpdateSet.getUniqueValue();

            var arrSysIds = [];

            var excludeDefaultUpdateSet = gs.getProperty('collision_detection.set.exclude_default', 'false'); // string ["true", "false"]
            var excludeUpdatedBefore = gs.getProperty('collision_detection.set.exclude_updated_before', 'false'); // string ["true", "false"]

            var arrCustomerUpdates = this._getCustomerUpdates(grInputUpdateSet.getUniqueValue());

            var grUpdateSet = new GlideRecord("sys_update_set");
            grUpdateSet.addEncodedQuery(inputQuery);

            // Exclude default
            if (excludeDefaultUpdateSet === 'true') {
                grUpdateSet.addQuery("is_default", false);
            }

            // Exclude itself
            grUpdateSet.addQuery("sys_id", "!=", inputUpdateSetSysId);

            // Left join with customer updates table
            var grCustomerUpdate = grUpdateSet.addJoinQuery("sys_update_xml");
            grCustomerUpdate.addCondition("name", arrCustomerUpdates[0].name);

            // Exclude customer updates updated before this one
            if (excludeUpdatedBefore === "true") {
                grCustomerUpdate.addCondition("sys_updated_on", ">", arrCustomerUpdates[0].updated);
            }

            for (var i = 1; i < arrCustomerUpdates.length; i++) {
                var grCustomerUpdateOr = grCustomerUpdate.addOrCondition("name", arrCustomerUpdates[i].name);
                if (excludeUpdatedBefore === "true") {
                    grCustomerUpdateOr.addCondition("sys_updated_on", ">", arrCustomerUpdates[i].updated);
                }
            }

            grUpdateSet.query();

            while (grUpdateSet.next()) {
                arrSysIds.push(grUpdateSet.getUniqueValue());
            }

            return arrSysIds;

        } catch (e) {
            gs.logError(JSON.stringify(e, null, 2), 'UpdateSetUtils._setScanner()');
            return e;
        }
    },


    /**SNDOC
        @name _getCustomerUpdates
        @description Return the customer updates (represented by the field name) for a given update set.
        @param {String} [updateSetSysId] - sys_update_set.sys_id
        @returns {Array<String>} sys_update_xml.name
        @private
    */
    _getCustomerUpdates: function (updateSetSysId) {
        try {
            if (gs.nil(updateSetSysId)) {
                throw new Error('Not valid parameter: updateSetSysId => ' + JSON.stringify(updateSetSysId, null, 2));
            }

            var arrCustomerUpdates = [];

            var grCustomerUpdate = new GlideRecord("sys_update_xml");
            grCustomerUpdate.addQuery("update_set", updateSetSysId);
            grCustomerUpdate.query();

            while (grCustomerUpdate.next()) {
                var objCustomerUpdate = {};
                objCustomerUpdate.name = grCustomerUpdate.getValue("name");
                objCustomerUpdate.updated = grCustomerUpdate.getValue("sys_updated_on");
                arrCustomerUpdates.push(objCustomerUpdate);
            }

            return arrCustomerUpdates;

        } catch (e) {
            gs.logError(JSON.stringify(e, null, 2), 'UpdateSetUtils._getCustomerUpdates()');
            return e;
        }
    },

    type: 'CollisionDetectionUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>alealvar</sys_created_by>
        <sys_created_on>2022-05-19 00:58:35</sys_created_on>
        <sys_id>4bcc7aed1b630110be17a9b4bd4bcbb4</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>CollisionDetectionUtils</sys_name>
        <sys_package display_value="Update Set - Collision Detection Tool" source="a8cbf2ed1b630110be17a9b4bd4bcbf7">a8cbf2ed1b630110be17a9b4bd4bcbf7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Update Set - Collision Detection Tool">a8cbf2ed1b630110be17a9b4bd4bcbf7</sys_scope>
        <sys_update_name>sys_script_include_4bcc7aed1b630110be17a9b4bd4bcbb4</sys_update_name>
        <sys_updated_by>alealvar</sys_updated_by>
        <sys_updated_on>2022-05-19 01:05:18</sys_updated_on>
    </sys_script_include>
</record_update>
