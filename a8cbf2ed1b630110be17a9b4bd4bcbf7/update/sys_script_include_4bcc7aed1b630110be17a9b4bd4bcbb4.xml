<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.CollisionUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CollisionUtils</name>
        <script><![CDATA[// Author: Alex Alvarez -- alexalvarez@mail.com

var CollisionUtils = {

    checkCollisions: function(id) {
        var arrUpdates, arrChildSets, arrChildUpdates, arrUnreleasedSets, arrUnreleasedUpdates,
            intersection, warningMessages, grSet, grSetId, grSetBase, arrUtil;

        arrUtil = new ArrayUtil();

        grSet = new GlideRecord('sys_update_set');
        grSet.get(id);

        grSetId = grSet.getUniqueValue();
        grSetBase = grSet.getValue('base_update_set');

        arrUpdates = CollisionUtils._getCustomerUpdates(grSetId);

        // if it is a base update set, then include the customer updates of the childs
        if (grSetBase === grSetId) {
            arrChildSets = CollisionUtils._getChildUpdateSets(grSetId);

            arrChildSets.forEach(
                function(childId) {
                    arrChildUpdates = CollisionUtils._getCustomerUpdates(childId);
                    arrUpdates = arrUtil.concat(arrUpdates, arrChildUpdates);
                }
            );
        }

        // Delete duplicates
        arrUpdates = arrUtil.unique(arrUpdates);

        // Get unreleased update sets excluding current and childs
        arrUnreleasedSets = CollisionUtils._getUnreleasedUpdateSets(id, arrChildSets);

        arrUnreleasedSets.forEach(
            function(unreleasedSet) {
                arrUnreleasedUpdates = CollisionUtils._getCustomerUpdates(unreleasedSet);
                intersection = arrUtil.intersect(arrUnreleasedUpdates, arrUpdates);
                if (intersection.length != 0) {
                    warningMessages.push(CollisionUtils._formatCollision(arrChildSets, unreleasedSet, intersection));
                }
            }
        );

        return warningMessages;
    },

    _getCustomerUpdates: function(id) {
        var arrUpdates, grUpdate, updateName;

        grUpdate = new GlideRecord("sys_update_xml");
        grUpdate.addQuery("update_set", id);
        grUpdate.query();

        while (grUpdate.next()) {
            updateName = grUpdate.getValue("name");
            arrUpdates.push(updateName);
        }

        return arrUpdates;
    },

    _getChildUpdateSets: function(id) {
        var arrSets, grChild, childId;

        grChild = new GlideRecord('sys_update_set');
        grChild.addQuery('base_update_set', id);
        grChild.query();

        while (grChild.next()) {
            childId = grChild.getUniqueValue();
            arrSets.push(childId);
        }

        return arrSets;
    },

    _getUnreleasedUpdateSets: function(id, arrExcludedSets) {
        var arrSets, grSet, setId;

        grSet = new GlideRecord("sys_update_set");
        grSet.addNullQuery("release_date");
        grSet.addQuery("state", "!=", "ignore");
        grSet.addQuery("is_default", false);
        grSet.addQuery("sys_id", "!=", id);

        arrExcludedSets.forEach(
            function(excludedId) {
                grSet.addQuery('sys_id', '!=', excludedId);
            }
        );

        grSet.query();

        while (grSet.next()) {
            setId = grSet.getUniqueValue();
            arrSets.push(setId);
        }

        return arrSets;
    },

    _formatCollision: function(arrSets, arrUnreleasedSets, intersection) {
        var arrBatchedSets, grUpdate, setId, message;

        grUpdate = new GlideRecord('sys_update_xml');
        grUpdate.addQuery('name', 'IN', intersection);
        grUpdate.addQuery('update_set', 'IN', arrSets);
        grUpdate.query();

        while (grUpdate.next()) {
            setId = grUpdate.getValue('update_set');
            arrBatchedSets.push(setId);
        }

        message = "";

        if (arrBatchedSets.length == 1) {
            message = CollisionUtils._formatUpdateSetLink(arrBatchedSets[0]);
        } else {
            arrBatchedSets.forEach(
                function(uset) {
                    message += CollisionUtils._formatUpdateSetLink(uset) + ", ";
                }
            );
        }

        message += " has collisions with " + CollisionUtils._formatUpdateSetLink(arrUnreleasedSets) + " because of: ";

        if (intersection.length == 1) {
            message += CollisionUtils._formatCustomerUpdate(intersection[0]);
        } else {
            intersection.forEach(
                function(inter) {
                    message += CollisionUtils._formatCustomerUpdate(inter) + ", ";
                }
            );
        }


        return message;
    },

    _formatUpdateSetLink: function(id) {
        var grUpdateSet, setDV;

        grUpdateSet = new GlideRecord('sys_update_set');
        grUpdateSet.get(id);

        setDV = grUpdateSet.getDisplayValue();

        return "<a target='_blank' href='sys_update_set.do?sys_id=" + id + "'>" + setDV + "</a>";
    },

    _formatCustomerUpdate: function(updateId) {
        var recordTable, recordId;

        recordTable = updateId.slice(0, -33);
        recordId = updateId.slice(-32);

        return "<a target='_blank' href='" + recordTable + ".do?sys_id=" + recordId + "'>" + updateId + "</a>";
    },
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>alealvar</sys_created_by>
        <sys_created_on>2022-05-19 00:58:35</sys_created_on>
        <sys_id>4bcc7aed1b630110be17a9b4bd4bcbb4</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>CollisionUtils</sys_name>
        <sys_package display_value="Update Set - Collision Detection Tool" source="a8cbf2ed1b630110be17a9b4bd4bcbf7">a8cbf2ed1b630110be17a9b4bd4bcbf7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Update Set - Collision Detection Tool">a8cbf2ed1b630110be17a9b4bd4bcbf7</sys_scope>
        <sys_update_name>sys_script_include_4bcc7aed1b630110be17a9b4bd4bcbb4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-21 16:39:33</sys_updated_on>
    </sys_script_include>
</record_update>
